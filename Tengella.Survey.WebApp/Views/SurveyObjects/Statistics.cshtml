@model Tengella.Survey.WebApp.Models.SurveyStatisticsViewModel

@using Tengella.Survey.Data.Enums

@{
    ViewData["Title"] = "Survey Statistics";
    var jsonSettings = new System.Text.Json.JsonSerializerOptions
            {
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
            };
    var questionsJson = System.Text.Json.JsonSerializer.Serialize(Model.Questions.Select(q => new
    {
        q.QuestionId,
        q.QuestionName,
        QuestionType = q.QuestionType.ToString(),
        Choices = q.QuestionChoices.Select(c => c.ChoiceText).ToArray()
    }), jsonSettings);
    var submissionsJson = System.Text.Json.JsonSerializer.Serialize(Model.Submissions.SelectMany(s => s.Answers), jsonSettings);
    var totalSubmissions = Model.Submissions.Count;
    var totalAnswers = Model.Submissions.SelectMany(s => s.Answers).Where(a => a.AnswerValue != "").Count();
    var avgAnswersPerSubmission = totalAnswers / (double)totalSubmissions;
    var avgAnswersPerQuestion = totalAnswers / (double)Model.Questions.Count;
}

<div class="container mt-5">
    <div class="text-center mb-4">
        <h1 class="display-4 text-primary">@Model.SurveyTitle</h1>
        <p class="lead">@Model.SurveyDescription</p>
    </div>

    <div class="row mb-4">
        <div class="col-md-4 text-center">
            <div class="stat-card bg-light p-3 rounded shadow-sm">
                <h5>Total Submissions</h5>
                <h3>@totalSubmissions</h3>
            </div>
        </div>
        <div class="col-md-4 text-center">
            <div class="stat-card bg-light p-3 rounded shadow-sm">
                <h5>Average Answers per Submission</h5>
                <h3>@avgAnswersPerSubmission.ToString("F2")</h3>
            </div>
        </div>
        <div class="col-md-4 text-center">
            <div class="stat-card bg-light p-3 rounded shadow-sm">
                <h5>Average Answers per Question</h5>
                <h3>@avgAnswersPerQuestion.ToString("F2")</h3>
            </div>
        </div>
    </div>

    <div class="chart-buttons mb-4 text-center">
        <button class="btn btn-primary mx-1" onclick="changeChartType('pie')">Pie Chart</button>
        <button class="btn btn-primary mx-1" onclick="changeChartType('bar')">Bar Chart</button>
        <button class="btn btn-primary mx-1" onclick="changeChartType('line')">Line Chart</button>
    </div>

    <div class="chart-container">
        <script>
            var questions = @Html.Raw(questionsJson);
            var answers = @Html.Raw(submissionsJson);
            var charts = [];
            var chartType = 'pie';

            document.addEventListener("DOMContentLoaded", function () {
                console.log('Questions:', questions);
                console.log('Answers:', answers);
                questions.forEach(function (question) {
                    if (question.QuestionType !== "free_text_choice") {
                        var ctx = document.getElementById('chart-' + question.QuestionId).getContext('2d');
                        var labels = question.Choices;
                        var data = labels.map(function (choice) {
                            return answers.filter(function (answer) {
                                return answer.QuestionId === question.QuestionId && answer.AnswerValue === choice;
                            }).length;
                        });

                        var chart = new Chart(ctx, {
                            type: chartType,
                            data: {
                                labels: labels,
                                datasets: [{
                                    label: 'Responses',
                                    data: data,
                                    backgroundColor: [
                                        'rgba(255, 99, 132, 0.2)',
                                        'rgba(54, 162, 235, 0.2)',
                                        'rgba(255, 206, 86, 0.2)',
                                        'rgba(75, 192, 192, 0.2)',
                                        'rgba(153, 102, 255, 0.2)',
                                        'rgba(255, 159, 64, 0.2)'
                                    ],
                                    borderColor: [
                                        'rgba(255, 99, 132, 1)',
                                        'rgba(54, 162, 235, 1)',
                                        'rgba(255, 206, 86, 1)',
                                        'rgba(75, 192, 192, 1)',
                                        'rgba(153, 102, 255, 1)',
                                        'rgba(255, 159, 64, 1)'
                                    ],
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: 'top',
                                    },
                                    title: {
                                        display: true,
                                        text: 'Responses for ' + question.QuestionName
                                    }
                                }
                            }
                        });

                        charts.push(chart);
                    } else {
                        var answerList = document.createElement('ul');
                        answers.filter(function (answer) {
                            return answer.QuestionId === question.QuestionId;
                        }).forEach(function (answer) {
                            var listItem = document.createElement('li');
                            listItem.textContent = answer.AnswerValue;
                            answerList.appendChild(listItem);
                        });

                        var questionDiv = document.createElement('div');
                        questionDiv.classList.add('mb-5');
                        var questionTitle = document.createElement('h3');
                        questionTitle.textContent = question.QuestionName;
                        questionDiv.appendChild(questionTitle);
                        questionDiv.appendChild(answerList);

                        document.querySelector('.chart-container').appendChild(questionDiv);
                    }
                });
            });

            function changeChartType(newType) {
                chartType = newType;
                charts.forEach(function (chart) {
                    chart.config.type = newType;
                    chart.update();
                });
            }
        </script>
        @foreach (var question in Model.Questions)
        {
            if (question.QuestionType != QuestionType.free_text_choice.ToString())
            {
                <div class="mb-5 text-center">
                    <h3>@question.QuestionName</h3>
                    <div class="chart-wrapper" style="position: relative; height:300px; width:100%">
                        <canvas id="chart-@question.QuestionId"></canvas>
                    </div>
                </div>
            }
        }
    </div>
</div>